# -*- coding: utf-8 -*-

import numpy as np
import random

####################################################################################################
####################################################################################################
#
# Function to obtain a randomly-selected training data set list, which will contain:
#   First element: The number of the training data set (put in a placeholder number, AJM will re-assign)
#    (Note: There will likely be over four dozen training data sets, accounting for variances), 
#   Second element: An 81-element 1-D binary array, which gives the pattern of your alphabet value, 
#     values (each either 0 or 1), 
#   Third element: the number of the training data set output, in the range of (0.. 26),
#   Fourth element: the 'string' version of the output, e.g., 'A' is associated with the first desired output. 
#   Fifth element: the number of the 'big letter class' with which the letter is associated
#   Sixth element: the most characteristic letter for the 'big letter class'
#
####################################################################################################
####################################################################################################

    
# Various training data sets for the alphabet challenge. There are frequently more than one version of the 
#   same letter. The primary version of each letter is given in training data sets A..Z, then the variants are 
#   stored in approximately alphabetic order.     


#letters categorized into 10 classes
Standard_Letters_9 = [    
#trainingDataListA0 =  
(1,[0,0,0,0,1,0,0,0,0, 0,0,0,1,0,1,0,0,0, 0,0,1,0,0,0,1,0,0, 0,1,0,0,0,0,0,1,0, 1,1,1,1,1,1,1,1,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1],0,'A',0,'A'), # training data list 1 selected for the letter 'A'
#trainingDataListB0 =  
(2,[1,1,1,1,1,1,1,1,0, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,1,0, 1,1,1,1,1,1,1,0,0, 1,0,0,0,0,0,0,1,0, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,1,1,1,1,1,1,1,0],1,'B',1,'B'), # training data list 2, letter 'E', courtesy AJM
#trainingDataListC0 =  
(3,[1,1,1,1,1,1,1,1,1, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,1],2,'C',2,'C'), # training data list 3, letter 'C', courtesy PKVR
#trainingDataListD0 =  
(4,[1,1,1,1,1,1,1,1,0, 1,0,0,0,0,0,0,1,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,1,1, 1,1,1,1,1,1,1,1,0],3,'D',3,'O'), # training data list 4, letter 'D', courtesy TD
#trainingDataListE0 =  
(5,[1,1,1,1,1,1,1,1,1, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,1, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,1],4,'E',1,'B'), # training data list 5, letter 'E', courtesy BMcD 
#trainingDataListF0 =  
(6,[1,1,1,1,1,1,1,1,1, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,1, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0],5,'F',1,'B'), # training data list 6, letter 'F', courtesy SK
#trainingDataListG0 =  
(7,[1,1,1,1,1,1,1,1,1, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,1,1,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,1,1,1,1,1,1,1,1],6,'G',2,'C'),
#trainingDataListH0 =  
(8,[1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,1,1,1,1,1,1,1,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1],7,'H',0,'A'), # training data list 8, letter 'H', courtesy JC
#trainingDataListI0 =  
(9,[0,0,1,1,1,1,1,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,0,1,0,0,0,0, 0,0,1,1,1,1,1,0,0],8,'I',4,'I'), # training data list 9, letter 'I', courtesy GR
#trainingDataListJ0 = 
(10,[0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,1,0, 0,1,0,0,0,0,0,1,0, 0,1,0,0,0,0,0,1,0, 0,0,1,0,0,0,1,0,0, 0,0,0,1,1,1,0,0,0],9,'J',9,'J'), # training data list 10 selected for the letter 'L', courtesy JT
#trainingDataListK0 = 
(11,[1,0,0,0,0,0,1,0,0, 1,0,0,0,0,1,0,0,0, 1,0,0,0,1,0,0,0,0, 1,0,0,1,0,0,0,0,0, 1,1,1,0,0,0,0,0,0, 1,0,0,1,0,0,0,0,0, 1,0,0,0,1,0,0,0,0, 1,0,0,0,0,1,0,0,0, 1,0,0,0,0,0,1,0,0],10,'K',5,'K'), # training data list 11 selected for the letter 'K', courtesy EO      
#trainingDataListL0 = 
(12,[1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,1],11,'L',2,'C'), # training data list 12 selected for the letter 'L', courtesy PV
#trainingDataListM0 = 
(13,[1,0,0,0,0,0,0,0,1, 1,1,0,0,0,0,0,1,1, 1,1,0,0,0,0,0,1,1, 1,0,1,0,0,0,1,0,1, 1,0,1,0,0,0,1,0,1, 1,0,0,1,0,1,0,0,1, 1,0,0,1,0,1,0,0,1, 1,0,0,0,1,0,0,0,1, 1,0,0,0,1,0,0,0,1],12,'M',6,'M'), # training data list 13 selected for the letter 'M', courtesy GR            
#trainingDataListN0 = 
(14,[1,0,0,0,0,0,0,0,1, 1,1,0,0,0,0,0,0,1, 1,0,1,0,0,0,0,0,1, 1,0,0,1,0,0,0,0,1, 1,0,0,0,1,0,0,0,1, 1,0,0,0,0,1,0,0,1, 1,0,0,0,0,0,1,0,1, 1,0,0,0,0,0,0,1,1, 1,0,0,0,0,0,0,0,1],13,'N',6,'M'), # training data list 14 selected for the letter 'N'
#trainingDataListO0 = 
(15,[0,1,1,1,1,1,1,1,0, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 0,1,1,1,1,1,1,1,0],14,'O',3,'O'), # training data list 15, letter 'O', courtesy TD
#trainingDataListP0 = 
(16,[1,1,1,1,1,1,1,1,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,1,1,1,1,1,1,1,1, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0],15,'P',1, 'B'), # training data list 16, letter 'P', courtesy MT 
#trainingDataListQ0 = 
(17,[1,1,1,1,1,1,1,1,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,1,0,0,1, 1,0,0,0,0,0,1,0,1, 1,0,0,0,0,0,0,1,1, 1,1,1,1,1,1,1,1,1],16,'Q',3,'O'), # training data list 17, letter 'Q', courtesy AJM (square corners)
#trainingDataListR0 = 
(18,[1,1,1,1,1,1,1,1,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,1,1,1,1,1,1,1,1, 1,0,0,0,0,1,0,0,0, 1,0,0,0,0,0,1,0,0, 1,0,0,0,0,0,0,1,0, 1,0,0,0,0,0,0,0,1],17,'R',1,'B'), # training data list 18, letter 'R', courtesy AJM (variant on 'P') 
#trainingDataListS0 = 
(19,[1,1,1,1,1,1,1,1,1, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0,1, 0,0,0,0,0,0,0,0,1, 0,0,0,0,0,0,0,0,1, 1,1,1,1,1,1,1,1,1],18,'S',1,'B'), # training data list 19, letter 'S', courtesy RG (square corners)
#trainingDataListT0 = 
(20,[0,1,1,1,1,1,1,1,0, 0,0,0,0,1,0,0,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,0,1,0,0,0,0],19,'T',4,'I'), # training data list 20, letter 'T', courtesy JR
#trainingDataListU0 = 
(21,[1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 0,1,0,0,0,0,0,1,0, 0,0,1,1,1,1,1,0,0],20,'U',8,'U'), # training data list 21, letter 'U', courtesy AJM 
#trainingDataListV0 = 
(22,[1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 0,1,0,0,0,0,0,1,0, 0,1,0,0,0,0,0,1,0, 0,0,1,0,0,0,1,0,0, 0,0,1,0,0,0,1,0,0, 0,0,0,1,0,1,0,0,0, 0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,0,0,0],21,'V',7,'V'), # training data list 22, letter 'V', courtesy AJM 
#trainingDataListW0 = 
(23,[1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,1,0,0,0,1, 1,0,0,1,0,1,0,0,1, 1,0,1,0,0,0,1,0,1, 0,1,0,0,0,0,0,1,0],22,'W',10,'W'), # training data list 23, letter 'W', courtesy KW
#trainingDataListX0 = 
(24,[1,0,0,0,0,0,0,0,1, 0,1,0,0,0,0,0,1,0, 0,0,1,0,0,0,1,0,0, 0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,1,0,1,0,0,0, 0,0,1,0,0,0,1,0,0, 0,1,0,0,0,0,0,1,0, 1,0,0,0,0,0,0,0,1],23,'X',5,'K'), # training data list 24, letter 'X', courtesy JD
#trainingDataListY0 = 
(25,[1,0,0,0,0,0,0,0,1, 0,1,0,0,0,0,0,1,0, 0,0,1,0,0,0,1,0,0, 0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,0,1,0,0,0,0],24,'Y',11,'Y'), # training data list 26, letter 'Z', courtesy ZC
#trainingDataListZ0 = 
(26,[1,1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,1,0,0, 0,0,0,0,0,1,0,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,1,0,0,0,0,0, 0,0,1,0,0,0,0,0,0, 0,1,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,1],25,'Z',12,'Z') # training data list 26, letter 'Z', courtesy ZW

#end of Standard_Letters
]

#letter variants categorized into 8 classes
Variant_Letters_9 = [
#trainingDataListG1 = 
#(7,[1,1,1,1,1,1,1,1,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,1,1,1,0, 1,0,0,0,0,0,0,1,0, 1,0,0,0,0,0,0,1,0, 1,1,1,1,1,1,1,1,0],6,'G',2,'C'),    
#trainingDataListQ = 
(17,[0,0,1,1,1,1,1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,0,0,1,1,1,1,1,0,1],16,'Q',3,'O'), # training data list 17, letter 'Q', courtesy RG    
#trainingDataListE1 = 
(27,[1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1],4,'E',1,'B'), # training data VARIANT for 'E,' courtesy BMcD
#trainingDataListM1 = 
(28,[1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1,0,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1],12,'M',6,'M'), # training data list 28, variant for 'M', courtesy TD
				  
#trainingDataListE =
#(5,[1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1],4,'E',1,'B'), # training data VARIANT for 'E,' courtesy BMcD   
#trainingDataListE =
#(5,[1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,1,1,1,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1],4,'E',1,'B'), # training data VARIANT for 'E,' courtesy BMcD - serif

# Kevin Wong
#trainingDataListw = 
(23, [1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,1,1,0,0,1,0,1,0,0,1,1,0,1,0,0,0,1,0,1,1,1,0,0,0,0,0,1,1],22,'W',10,'W'),
#trainingDataListw = 
#(23, [1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,1,1,0,0,1,0,1,0,0,1,1,0,1,0,0,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1],22,'W',10,'W'),
#trainingDataListw = 
(23, [1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,1,1,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,0,0,1,0,0],22,'W',10,'W'),

# Serif M Chang
#trainingDataListw = 
#(13,[1,1,0,0,0,0,0,1,1,0,1,0,0,0,0,0,1,0,0,1,1,0,0,0,1,1,0,0,1,0,1,0,1,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,1,1,1,0,0,0,1,1,1],12,'M',6,'M'),

# Sameera
#trainingDataListF = 
#(6,[1,1,1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0,1, 0,0,0,0,0,0,0,0,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0],5,'F',1,'B'),

# Troy D: M, O, D
#trainingDataListM = 
#(13,[1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1,0,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1],12,'M',6,'M'), # training data list 13 selected for the letter 'M'
#trainingDataListO = 
#(15,[0,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,0],14,'O',3,'O'), # training data list 15 selected for the letter 'O'
#trainingDataListD = 
#(4,[1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0],3,'D',3,'O'), # training data list 4 selected for the letter 'D'

# Ishmael A. 
#trainingDataListX = 
(18,[1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1],17,'R',1,'B'),
#trainingDataListR2= 
#(18,[1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,1],17,'R',1,'B'),

# Orion
#trainingDataListO = 
(15,[1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,],14,'O',3,'O'),    

# Michael T. 
#trainingDataListP = 
#(16,[1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],15,'P',1,'B'),       
#trainingDataListP = 
#(16,[0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],15,'P',1,'B'),
#trainingDataListP = 
#(16,[0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,0,1,0,0,1,0,0,0,1,0,1,0,0,1,0,0,0,1,0,1,0,0,1,0,0,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],15,'P',1,'B'),    

# Robert G.
#trainingDataListG = 
#(7,[1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1],6,'G',2,'C'),
#trainingDataListG = 
#(7,[1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,0],6,'G',2,'C'),
#trainingDataListG = 
#(7,[0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,1,1,0,0,0],6,'G',2,'C'),
#trainingDataListG = 
#(7,[1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,0,1,1,0,0,1,1,1,1,0,1,1,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0],6,'G',2,'C'),
#trainingDataListG = 
#(7,[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],6,'G',2,'C'),

# Richard G.
#TrainingDataListS= this is an S
#(19,[1,1,1,1,1,1,1,1,1, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0,1, 0,0,0,0,0,0,0,0,1, 0,0,0,0,0,0,0,0,1, 1,1,1,1,1,1,1,1,1],4,'E',1,'B'),

# Justice D. - U
#trainingDataListU = 
#(21,[1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0, 1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,0,1,1,0,0,0,1,1, 0,0,0,1,1,1,1,1,0,0],20,'U',8,'U'),

#TrainingDataListS=
(19,[0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0],18,'S',1,'B'),
#TrainingDataListS=
(19,[0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0],18,'S',1,'B'),
#TrainingDataListS = 
(19,[0,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,0],18,'S',1,'B'),
#TrainingDataListS = 
(19,[0,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,0],18,'S',1,'B'),

# Erik O. - K

#TrainingDataListS = 
(11,[1,0,0,0,0,1,0,0,0, 1,0,0,0,0,1,0,0,0, 1,0,0,0,1,0,0,0,0, 1,0,0,1,0,0,0,0,0, 1,1,1,0,0,0,0,0,0, 1,0,0,1,0,0,0,0,0, 1,0,0,0,1,0,0,0,0, 1,0,0,0,0,1,0,0,0, 1,0,0,0,0,1,0,0,0],10,'K',5,'K'), # training data list 11 selected for the letter 'K', courtesy EO      

#(11,[1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,1,0,0,0,1,1,0,0,0,1,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,1,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,1],10,'K',5,'K'),           
#TrainingDataListS = 
#(11,[1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,1,0,0,1,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1],10,'K',5,'K'),
#TrainingDataListS = 
#(11,[1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0],10,'K',5,'K'),
# Erik O - variants with offset main vertical

#TrainingDataListS = 
#(11,[1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0],10,'K',5,'K'),               
#TrainingDataListS = 
#(11,[0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0],10,'K',5,'K'),                                
#TrainingDataListS = 
#(11,[0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1],10,'K',5,'K'),
#TrainingDataListS = 
#(11,[0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0],10,'K',5,'K'),
#TrainingDataListS = 
#(11,[0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1],10,'K',5,'K'),                                                               

# Zulinette - Y                        
#trainingDataListY = 
(25,[1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0],24,'Y',11,'Y'),
#trainingDataListY = 
(25,[1,1,1,0,0,0,1,1,1,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0],24,'Y',11,'Y'),       
#trainingDataListY = 
#(25,[0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0],24,'Y',11,'Y'),       
#trainingDataListY = 
#(25,[1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0],24,'Y',11,'Y'),


# Mark H - S
#trainingDataListS1 = 
(19,[0,1,1,1,1,1,1,1,0, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 0,1,1,1,1,1,1,1,0, 0,0,0,0,0,0,0,0,1, 0,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 0,1,1,1,1,1,1,1,0],18,'S', 1, 'B'), # training data list 19, letter 'S',
#trainingDataListS2 = 
#(19,[0,1,1,1,1,1,1,1,0, 1,1,1,0,0,0,1,1,1, 1,1,0,0,0,0,0,0,0, 1,1,1,0,0,0,0,0,0, 0,1,1,1,1,1,1,1,0, 0,0,0,0,0,0,1,1,1, 0,0,0,0,0,0,0,1,1, 1,1,1,0,0,0,1,1,1, 0,1,1,1,1,1,1,1,0],18,'S', 1, 'B') # training data list 19, letter 'S',

#michelle
#trainingDataListO1 = 
(15,[0,1,1,1,1,1,1,1,0, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 0,1,1,1,1,1,1,1,0], 14, 'O', 3, 'O'),
#trainingDataListO2 = 
(15,[0,0,1,1,1,1,1,0,0, 0,1,0,0,0,0,0,1,0, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 0,1,0,0,0,0,0,1,0, 0,0,1,1,1,1,1,0,0], 14, 'O', 3, 'O'),

#Derek
#trainingDataListL1 = 
(12,[1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,1,1,1,1,0,0,0,0],11,'L',2,'C'), # training data list 12 selected for the letter 'L', courtesy Derek
#trainingDataListL2 = 
(12,[1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,1,1,1,1,1,0,0,0],11,'L',2,'C'), # training data list 12 selected for the letter 'L', courtesy Derek
# end of Letter_Variants	

#Priya
#trainingDataListM0 = 
#(13,[1,0,0,0,0,0,0,0,1, 1,1,0,0,0,0,0,1,1, 1,1,0,0,0,0,0,1,1, 1,0,1,0,0,0,1,0,1, 1,0,1,0,0,0,1,0,1, 1,0,0,1,0,1,0,0,1, 1,0,0,1,0,1,0,0,1, 1,0,0,0,1,0,0,0,1, 1,0,0,0,1,0,0,0,1],12,'M',6,'M'), # training data list 13 selected for the letter 'M'

#trainingDataListvM1 = 
#(27,[1,0,0,0,0,0,0,0,1, 1,1,0,0,0,0,0,1,1, 1,0,1,0,0,0,1,0,1, 1,0,0,1,0,1,0,0,1, 1,0,0,0,1,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1],12,'M',6,'M'), # training data list 27, variant for 'M', courtesy Priya

#JOE
#trainingDataListH0 = 
#(8,[1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,1,1,1,1,1,1,1,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1],7,'H',0,'A'), # training data list 8 selected for the letter 'H', courtesy Joe C
#trainingDataListH1 = 
#(8,[0,0,1,0,0,0,1,0,0, 0,0,1,0,0,0,1,0,0, 0,0,1,0,0,0,1,0,0, 0,0,1,0,0,0,1,0,0, 0,0,1,1,1,1,1,0,0, 0,0,1,0,0,0,1,0,0, 0,0,1,0,0,0,1,0,0, 0,0,1,0,0,0,1,0,0, 0,0,1,0,0,0,1,0,0],7,'H',0,'A'), # training data list 8 selected for the letter 'H', courtesy Joe C
#trainingDataListH2 = 
#(8,[1,1,1,0,0,1,1,1,0, 0,1,0,0,0,0,1,0,0, 0,1,0,0,0,0,1,0,0, 0,1,0,0,0,0,1,0,0, 0,1,1,1,1,1,1,0,0, 0,1,0,0,0,0,1,0,0, 0,1,0,0,0,0,1,0,0, 0,1,0,0,0,0,1,0,0, 1,1,1,0,0,1,1,1,0],7,'H',0,'A'), # training data list 8 selected for the letter 'H', courtesy Joe C
#trainingDataListH3 = 
#(8,[1,1,1,0,0,0,1,1,1, 0,1,0,0,0,0,0,1,0, 0,1,0,0,0,0,0,1,0, 0,1,0,0,0,0,0,1,0, 0,1,1,1,1,1,1,1,0, 0,1,0,0,0,0,0,1,0, 0,1,0,0,0,0,0,1,0, 0,1,0,0,0,0,0,1,0, 1,1,1,0,0,0,1,1,1],7,'H',0,'A'), # training data list 8 selected for the letter 'H', courtesy Joe C
(8,[0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,1,1,1,1,1,1,1,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 0,0,0,0,0,0,0,0,0],7,'H',0,'A'), # training data list 8 selected for the letter 'H', courtesy Joe C

#trainingDataListV =
(22,

[1,0,0,0,0,0,0,0,1,
0,1,0,0,0,0,0,1,0,
0,1,0,0,0,0,0,1,0,
0,0,1,0,0,0,1,0,0,
0,0,1,1,0,1,1,0,0,
0,0,0,1,0,1,0,0,0,
0,0,0,1,0,1,0,0,0,
0,0,0,0,1,0,0,0,0,
0,0,0,0,1,0,0,0,0],

21,'V',7,'V'),


#MARKH
#trainingDataListI0 =  
(9,[0,0,0,1,1,1,0,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,1,1,1,0,0,0],8,'I',4,'I'), # training data list 9, letter 'I', courtesy GR
#trainingDataListT0 = 
(20,[0,0,1,1,1,1,1,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,0,1,0,0,0,0, 0,0,0,0,1,0,0,0,0],19,'T',4,'I'), # training data list 20, letter 'T', courtesy JR
#trainingDataListJ0 = 
(10,[0,0,0,0,0,0,1,1,1, 0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,1,0, 0,1,0,0,0,0,0,1,0, 0,1,0,0,0,0,0,1,0, 0,0,1,0,0,0,1,0,0, 0,0,0,1,1,1,0,0,0],9,'J',9,'J'), # training data list 10 selected for the letter 'L', courtesy JT
#trainingDataListA0 =  
#(1,[0,0,0,0,1,0,0,0,0, 0,0,0,1,0,1,0,0,0, 0,0,0,1,0,1,0,0,0, 0,0,1,0,0,0,1,0,0, 0,0,1,1,1,1,1,0,0, 0,1,0,0,0,0,0,1,0, 0,1,0,0,0,0,0,1,0, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1],0,'A',0,'A'), # training data list 1 selected for the letter 'A'
(1,[0,0,0,0,1,0,0,0,0, 0,0,0,1,0,1,0,0,0, 0,0,1,0,0,0,1,0,0, 0,1,0,0,0,0,0,1,0, 0,1,1,1,1,1,1,1,0, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1],0,'A',0,'A'), # training data list 1 selected for the letter 'A'
#trainingDataListP1 = 
(16,[1,1,1,1,1,1,1,1,0, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,1,1,1,1,1,1,1,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0],15,'P',1, 'B'), # training data list 16, letter 'P', courtesy MT 

#trainingDataListC0 =  
(3,[0,1,1,1,1,1,1,1,1, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 0,1,1,1,1,1,1,1,1],2,'C',2,'C'), # training data list 3, letter 'C', courtesy PKVR
(3,[0,0,1,1,1,1,1,1,1, 0,1,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 0,1,0,0,0,0,0,0,0, 0,0,1,1,1,1,1,1,1],2,'C',2,'C'), # training data list 3, letter 'C', courtesy PKVR

#trainingDataListB0 =  
(2,[1,1,1,1,1,1,1,1,0, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,1,1,1,1,1,1,1,0, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,1,1,1,1,1,1,1,0],1,'B',1,'B'), # training data list 2, letter 'E', courtesy AJM

#trainingDataListD0 =  
(4,[1,1,1,1,1,1,1,0,0, 1,0,0,0,0,0,0,1,0, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,1,0, 1,1,1,1,1,1,1,0,0],3,'D',3,'O'), # training data list 4, letter 'D', courtesy TD

#trainingDataListF = 
(6,[1,1,1,1,1,1,1,1,1, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,1,1,1,1,1,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0],5,'F',1,'B'),
(6,[1,1,1,1,1,1,1,1,1, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0],5,'F',1,'B'),

#trainingDataListG = 
(7,[0,0,1,1,1,1,1,0,0, 0,1,0,0,0,0,0,1,0, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,1,1, 1,0,0,0,0,0,0,0,1, 0,1,0,0,0,0,0,1,0, 0,0,1,1,1,1,1,0,0],6,'G',2,'C'),

#trainingDataListU0 = 
(21,[1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,1, 1,1,1,1,1,1,1,1,1],20,'U',8,'U'), # training data list 21, letter 'U', courtesy AJM 

#trainingDataListV =
(22,

[1,0,0,0,0,0,0,0,1,
0,1,0,0,0,0,0,1,0,
0,1,0,0,0,0,0,1,0,
0,0,1,0,0,0,1,0,0,
0,0,1,0,0,0,1,0,0,
0,0,0,1,0,1,0,0,0,
0,0,0,1,0,1,0,0,0,
0,0,0,0,1,0,0,0,0,
0,0,0,0,1,0,0,0,0],

21,'V',7,'V'),

#trainingDataListX0 = 
(24,[
1,1,1,0,0,0,1,1,1, 
0,1,0,0,0,0,0,1,0, 
0,0,1,0,0,0,1,0,0, 
0,0,0,1,0,1,0,0,0, 
0,0,0,0,1,0,0,0,0, 
0,0,0,1,0,1,0,0,0, 
0,0,1,0,0,0,1,0,0, 
0,1,0,0,0,0,0,1,0, 
1,1,1,0,0,0,1,1,1
],23,'X',5,'K'), # training data list 24, letter 'X', courtesy JD

#trainingDataListX0 = 
(24,[
0,0,0,0,0,0,0,0,0, 
0,1,0,0,0,0,0,1,0, 
0,0,1,0,0,0,1,0,0, 
0,0,0,1,0,1,0,0,0, 
0,0,0,0,1,0,0,0,0, 
0,0,0,1,0,1,0,0,0, 
0,0,1,0,0,0,1,0,0, 
0,1,0,0,0,0,0,1,0, 
0,0,0,0,0,0,0,0,0
],23,'X',5,'K'), # training data list 24, letter 'X', courtesy JD


#trainingDataListZ0 = 
(26,[
0,1,1,1,1,1,1,1,0, 
0,0,0,0,0,0,0,1,0, 
0,0,0,0,0,0,1,0,0, 
0,0,0,0,0,1,0,0,0, 
0,0,0,0,1,0,0,0,0, 
0,0,0,1,0,0,0,0,0, 
0,0,1,0,0,0,0,0,0, 
0,1,0,0,0,0,0,0,0, 
0,1,1,1,1,1,1,1,0
],25,'Z',12,'Z') # training data list 26, letter 'Z', courtesy ZW


#end of list
]

def getTrainingValue(set, index):
       
    return (set[index]) 
    
#dataset is the data set to duplicate and add noise
#factor is % chance of a pixel adding noise [0,1]
def AddRandomNoise(ds, factor):
    with_noise=[]
    
    ll = len(ds)
    for i in range(ll):
        
        #get entire row
        row = ds[i]
        
        #copy the data part
        data = row[1][:]
        
        for j in range(len(data)):
            z = random.random()
            if z < factor:
                data[j] = data[j]^1
        
        #make a new row
        newrow = (row[0],data,row[2],row[3],row[4],row[5])
        with_noise.append(newrow)
    return with_noise


#choose which letters to work with noise
Standard_Letters = Standard_Letters_9
Variant_Letters = Variant_Letters_9

All_Letters = list(Standard_Letters)
All_Letters.extend(Variant_Letters)
len(All_Letters)

#now add several sets of random noise (5%)
All_Noise = list()
for i in range(10):
    noise = AddRandomNoise(All_Letters, .05)
    All_Noise.extend(noise)
len(All_Noise)
Noise_Letters = list(All_Letters)
Noise_Letters.extend(All_Noise)
len(Noise_Letters)
    
#now add several sets of random noise (10%)
All_Noise = list()
for i in range(10):
    noise = AddRandomNoise(All_Letters, .10)
    All_Noise.extend(noise)
len(All_Noise)
Noise_Letters.extend(All_Noise)
len(Noise_Letters)

        
#create test sets with 5%, 10%, and 20% noise
Noise5 = AddRandomNoise(All_Letters,.05)
Noise10 = AddRandomNoise(All_Letters,.10)
Noise20 = AddRandomNoise(All_Letters,.20)

####################################################################################################
####################################################################################################
#
# Procedure to print out a letter, given the number of the letter code
#
####################################################################################################
####################################################################################################

def printLetter (trainingDataList):    
            
    pixelArray = trainingDataList[1]
    print ' '
    gridWidth = 9
    gridHeight = 9
    iterAcrossRow = 0
    iterOverAllRows = 0
    while iterOverAllRows <gridHeight:
        while iterAcrossRow < gridWidth:
            arrayElement = pixelArray [iterAcrossRow+iterOverAllRows*gridWidth]
            if arrayElement <0.9: printElement = ' '
            else: printElement = 'X'
            print printElement, 
            iterAcrossRow = iterAcrossRow+1
        print ' '
        iterOverAllRows = iterOverAllRows + 1
        iterAcrossRow = 0 #re-initialize so the row-print can begin again
    print 'The data set is for the letter', trainingDataList[3], ', which is alphabet number ', trainingDataList[2]
    if trainingDataList[0] > 25: print 'This is a variant pattern for letter ', trainingDataList[3] 
    
    return     

def printOneLetter(trainingDataList, letter):
    ll = len(trainingDataList)
    for i in range(ll):
        trainingValue = trainingDataList[i]
        if trainingValue[3]==letter:
            print('Index = %d' % i)
       	    printLetter(trainingValue)

####################################################################################################
#**************************************************************************************************#
####################################################################################################


    
def printset(set):
    ll = len(set)
    for i in range(ll):
	printLetter(getTrainingValue(set,i))
		

def checkset(set):
    #make sure the classes are correct
    ll = len(set)
    checks = [-1 for x in range(26)]
    
    #this is hardcoded to recognize 9 classes
    cchecks = np.array([' ' for x in range(13)])
    
    badCount = 0
    
    for i in range(ll):
        letter = set[i][3]
        iLetter = set[i][2]
        lclass = set[i][5]
        iLclass = set[i][4]
        bad = False
        
        #make sure letter index is correct (0 based)
        ii = ord(letter) - ord('A')
        if( ii != iLetter):
            bad = True
            print "%d) Letter '%c' has incorrect index = %d, should be %d" % (i, letter, iLetter, ii)
            
        x = checks[ii-1]
        if x == -1:
            #assign class
            checks[ii-1] = iLclass
        else:
            #check class
            if x != iLclass:
                bad = True
                print "%d) Letter '%c' has incorrect class = %d, should be %d" % (i, letter, iLclass, x)
                
        #verify letter class matches index
        y = cchecks[iLclass]
        if y == ' ':
            cchecks[iLclass] = lclass
        else:
            if y != lclass:
                bad = True
                print "%d) Letter '%c' class letter %c and index %d don't match" % (i, letter, lclass, iLclass )

        if bad == True:
            badCount = badCount+1
    print 'Found %d bad letters' % badCount
    
        												    												
def main():
    #printset(Standard_Letters)
    #printset(Variant_Letters)
    
    checkset(All_Letters)
    #printset(Standard_Letters)
    
            
	
	

                     
####################################################################################################
# Conclude specification of the MAIN procedure
####################################################################################################                
    
if __name__ == "__main__": main()

####################################################################################################
# End program
#################################################################################################### 